 /* Hacker News Data Exploration
 
 Skills used: Queries, Aggregate Functions
 
 */
 
 
 -- identifying the top 5 stories
 
 SELECT title, score
 FROM hacker_news
 ORDER BY score DESC
 LIMIT 5;


-- analysing the percentage of users that dominate story scores

 SELECT SUM(score)
 FROM hacker_news;

SELECT user, SUM(score)
FROM hacker_news
GROUP BY user
HAVING SUM(score) > 200
ORDER BY 2 DESC;

SELECT (517 + 308 + 304 + 282) / 6366.0;


-- identifying which users have posted a fake link and how many times

SELECT user,
   COUNT(*)
FROM hacker_news
WHERE url LIKE '%watch?v=dQw4w9WgXcQ%'
GROUP BY 1
ORDER BY 2 DESC;


-- categorising each story based on their source

SELECT CASE
   WHEN url LIKE '%github.com%' THEN 'GitHub'
   WHEN url LIKE '%medium.com%' THEN 'Medium'
   WHEN url LIKE '%nytimes.com%' THEN 'New York Times'
   ELSE 'Other'
  END AS 'Source',
  COUNT(*)
FROM hacker_news
GROUP BY 1;


-- analysing what the best time is to post a story

SELECT timestamp
FROM hacker_news
LIMIT 10;

SELECT strftime('%H', timestamp) AS 'Hour',
   ROUND(AVG(score), 1) AS 'Average Score',
   COUNT(*) AS 'Number of Stories'
FROM hacker_news
WHERE timestamp IS NOT NULL
GROUP BY 1
ORDER BY 2 DESC;
